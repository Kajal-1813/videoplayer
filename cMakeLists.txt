cmake_minimum_required(VERSION 3.16)
project(videoplayer)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find OpenCV
find_package(OpenCV REQUIRED)

# Create executable
add_executable(${PROJECT_NAME} VideoPlayer.cpp)

# Link OpenCV libraries
target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})

# Include OpenCV headers
target_include_directories(${PROJECT_NAME} PRIVATE ${OpenCV_INCLUDE_DIRS})

# Windows-specific: Copy OpenCV DLLs to output directory
if(WIN32)
    # Get OpenCV bin directory
    get_target_property(OPENCV_LIB_DIR opencv_core IMPORTED_LOCATION_RELEASE)
    get_filename_component(OPENCV_BIN_DIR ${OPENCV_LIB_DIR} DIRECTORY)
    
    # Find all OpenCV DLLs
    file(GLOB OPENCV_DLLS "${OPENCV_BIN_DIR}/*.dll")
    
    # Copy DLLs after build
    foreach(dll ${OPENCV_DLLS})
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${dll}"
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>"
            COMMENT "Copying OpenCV DLL: ${dll}"
        )
    endforeach()
endif()

# Set output directory
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Print configuration info
message(STATUS "OpenCV version: ${OpenCV_VERSION}")
message(STATUS "OpenCV include dirs: ${OpenCV_INCLUDE_DIRS}")
message(STATUS "OpenCV libraries: ${OpenCV_LIBS}")